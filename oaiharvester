#!/bin/bash

# Copyright 2012-2016 Wim Muskee <wimmuskee@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VERSION="0.21"
VERB="ListRecords"
CONFIGFILE="/etc/shell-oaiharvester/config.xml"
INSTALLDIR="/usr/share/shell-oaiharvester"
COMPRESS="false"
TEST="false"

function usage {
cat <<EOF
Usage: $0 [OPTION]

Harvest an OAI-PMH target that is configured. Use the configuration file to configure each
repository you want to harvest.

Options:
  -c, --config[=path]           Set a custom configuration file to use. By default, then
                                one in /etc/shell-oaiharvester/config.xml is used.
  -h, --help                    Displays the shell-oaiharvester help message.
  -l, --libdir[=path]           Provide another library directory (for testing purposes)
  -n, --no-records              When this is set, no record content is saved, only an
                                empty file.
  -r, --repository[=id]         Sets the repository identifier to harvest. This corresponds
                                with the identifier in the config file.
  -t, --test                    Do not harvest, but test if the repository validates.
  -v, --version                 Displays the shell-oaiharvester version.
  -z, --compress                Compress stored records with xz.
EOF
}

function cleanup {
	arg=${1:-1}

	# Print the instance logfile location
	if [ ! -z ${LOGFILE} ] && [ "${LOGTYPE}" == "instance" ]; then
		echo "The logfile for this instance was saved in ${LOGFILE}"
	fi

	if [ ! -z ${TMP} ]; then
		if [ "${arg}" == 0 ]; then
			echo "Removing temporary workfiles"
			rm -rf ${TMP}
		else
			echo "Maybe you want to see or delete the temporary workfiles in ${TMP}"
		fi
	fi

	exit $arg
}

function die {
	echo "Error: $@" >&2
	cleanup 1
}

trap cleanup SIGHUP SIGINT SIGTERM

# root check
if [ $(whoami) == "root" ]; then
	die "Don't use this tool logged in as root."
fi

# Reading options
if ! args=$(getopt -n "$0" -o "c:hl:nr:tvz" \
	-l "compress,config:,help,libdir:,no-records,repository:,test,version" -- "$@")
then
	exit 1
fi
eval "set -- $args"
while true ; do
	case "$1" in
		--config|-c) shift; CONFIGFILE=$1 ;;
		--help|-h) usage; exit 0 ;;
		--repository|-r) shift; REPOSITORY=$1 ;;
		--no-records|-n) VERB="ListIdentifiers" ;;
		--test|-t) TEST="true" ;;
		--version|-v) echo "${VERSION}"; exit 0 ;;
		--compress|-z) COMPRESS="true" ;;
		--libdir|-l) shift; INSTALLDIR=$1 ;;
		--) shift ; break ;;
		*) die "$0: Internal error!" ;;
	esac
	shift
done

# Loading functions
if [ ! -f "${INSTALLDIR}/functions.sh" ]; then
	die "No functions found in: ${INSTALLDIR}/functions.sh"
fi
source "${INSTALLDIR}/functions.sh"

# Check repository id
if [ -z ${REPOSITORY} ]; then
	die "No repository id provided"
fi

# Check config file
if [ -z ${CONFIGFILE} ] || [ ! -f ${CONFIGFILE} ]; then
	die "Config file not found: ${CONFIGFILE}"
fi

# Reading oai repository info
RECORDPATH=$(getGenericConfig "recordpath")
TMP=$(getGenericConfig "temppath")
LOGFILE=$(getGenericConfig "logfile")
LOGTYPE=$(getGenericConfig "logtype")
CURL_OPTS=$(getGenericConfig "curlopts")
UPDATE_CMD=$(getGenericConfig "updatecmd")
DELETE_CMD=$(getGenericConfig "deletecmd")
BASEURL=$(getRepositoryConfig "baseurl" ${REPOSITORY})
PREFIX=$(getRepositoryConfig "metadataprefix" ${REPOSITORY})
SET=$(getRepositoryConfig "set" ${REPOSITORY})
FROM=$(getRepositoryConfig "from" ${REPOSITORY})
UNTIL=$(getRepositoryConfig "until" ${REPOSITORY})
RESUMPTION=$(getRepositoryConfig "resumptiontoken" ${REPOSITORY})
CONDITIONAL=$(getRepositoryConfig "conditional" ${REPOSITORY})
REPOSITORY_RECORDPATH=$(getRepositoryConfig "repository_path" ${REPOSITORY})
REPOSITORY_UPDATE_CMD=$(getRepositoryConfig "repository_updatecmd" ${REPOSITORY})
REPOSITORY_DELETE_CMD=$(getRepositoryConfig "repository_deletecmd" ${REPOSITORY})

# checking required values
[ -z ${BASEURL} ] && die "No baseurl found for repository: ${REPOSITORY}"
# use protocol-default oai_dc prefix 
if [ -z ${PREFIX} ]; then
    PREFIX="oai_dc"
fi

# making sure we have a good logtype
LOGTYPE=${LOGTYPE:-"combined"}
if [ "${LOGTYPE}" != "combined" ] && [ "${LOGTYPE}" != "instance" ]; then
	echo "Logtype should be configured to either combined or instance."
	echo "setting to combined"
	LOGTYPE="combined"
fi

# generating random number for workfiles path
TMP_RANDOM=$(shuf -i 1-100000 -n 1)
[ -z ${TMP_RANDOM} ] && die "Generating random temppath"

# Set some sane defaults
# all workfiles go into a random tmp directory
RECORDPATH=${RECORDPATH:-/tmp}
TMP=${TMP:-/tmp}
TMP_RANDOM_PATH="shell-oaiharvester-${TMP_RANDOM}"
TMP="${TMP}/${TMP_RANDOM_PATH}"
REPOSITORY_RECORDPATH=${REPOSITORY_RECORDPATH:-${RECORDPATH}/${REPOSITORY}}

echo "Creating temporary workdir in ${TMP}"
mkdir -p ${TMP}

# Find out if we want to validate only
# no need for logfile in this step
if [ "${TEST}" == "true" ]; then
	testRepository
	exit 0
fi

# setting logfile based on logtype
LOGFILE=${LOGFILE:-/tmp/oaiharvester-log.csv}
if [ "${LOGTYPE}" == "instance" ]; then
	LOGFILE="${LOGFILE}.${TMP_RANDOM}"
fi

touch ${LOGFILE}
[ ! -w ${LOGFILE} ] && die "Logfile not writable: ${LOGFILE}"

# Making sure the repository storage dirs exists
if [ -d ${REPOSITORY_RECORDPATH} ]; then
	echo "Using repository storage in: ${REPOSITORY_RECORDPATH}"
else
	echo "Creating repository storage in: ${REPOSITORY_RECORDPATH}"
	mkdir -p ${REPOSITORY_RECORDPATH}
fi

# Setting other arguments if set in config.
[ ! -z ${SET} ] && URI_SET="&set=${SET}"
[ ! -z ${FROM} ] && URI_FROM="&from=${FROM}"
[ ! -z ${UNTIL} ] && URI_UNTIL="&until=$UNTIL"

# Checks for a last harvest timestamp, and uses it
# according to the granularity settings
# Overwrites repository from config setting.
repository_timestamp="${REPOSITORY_RECORDPATH}/lasttimestamp.txt"
if [ -f ${repository_timestamp} ]; then
	# check out identify for datetime granularity
	curl ${CURL_OPTS} "${BASEURL}?verb=Identify" -o ${TMP}/identify.xml
	granularity=$(getTargetData "granularity" "identify")

	if [ "${granularity}" == "YYYY-MM-DDThh:mm:ssZ" ]; then
		timestamp=$(cat ${repository_timestamp})
	else
		timestamp=$(cat ${repository_timestamp} | awk -F "T" '{print $1}')
	fi
	URI_FROM="&from=${timestamp}"
fi

# Sets the initial harvest uri
# if resumptiontoken set, this overrides normal behaviour
if [ "${RESUMPTION}" != "" ]; then
	URL="${BASEURL}?verb=${VERB}&resumptionToken=${RESUMPTION}"
else
	URL="${BASEURL}?verb=${VERB}&metadataPrefix=${PREFIX}${URI_SET}${URI_FROM}${URI_UNTIL}"
fi
echo "Starting harvest from: ${URL}"

# only check status code first time calling
statuscode=$(getHttpStatus ${URL})
if [ "${statuscode}" != "200" ]; then
	die "received status code ${statuscode}, exiting"
fi

# Now, get the initial page and the records
# if there is a resumptionToken, retrieve other pages
# Set current timestamp for next harvest
startharvestts=$(date -u +'%FT%TZ')
getRecords

ERROR=$(getTargetData "error" "oaipage")
if [ "${ERROR}" != "" ]; then
	die ${ERROR}
fi

RESUMPTION=$(getTargetData "resumptiontoken" "oaipage")

while [ "${RESUMPTION}" != "" ]; do
	RESUMPTION=$(echo ${RESUMPTION} | sed -f ${INSTALLDIR}/urlescape.sed)
	URL="${BASEURL}?verb=${VERB}&resumptionToken=${RESUMPTION}"
	getRecords
	RESUMPTION=$(getTargetData "resumptiontoken" "oaipage")
done

# When finished, save startharvest timestamp
echo ${startharvestts} > ${repository_timestamp}

cleanup 0
